// Generated by view binder compiler. Do not edit!
package com.sansheng.storypal.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.sansheng.storypal.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityChildScanBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnBack;

  @NonNull
  public final Button btnHelp;

  @NonNull
  public final Button btnOfflineBooks;

  @NonNull
  public final Button btnScan;

  @NonNull
  public final ImageView ivMagnifyingGlass;

  private ActivityChildScanBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnBack,
      @NonNull Button btnHelp, @NonNull Button btnOfflineBooks, @NonNull Button btnScan,
      @NonNull ImageView ivMagnifyingGlass) {
    this.rootView = rootView;
    this.btnBack = btnBack;
    this.btnHelp = btnHelp;
    this.btnOfflineBooks = btnOfflineBooks;
    this.btnScan = btnScan;
    this.ivMagnifyingGlass = ivMagnifyingGlass;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityChildScanBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityChildScanBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_child_scan, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityChildScanBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnBack;
      Button btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.btnHelp;
      Button btnHelp = ViewBindings.findChildViewById(rootView, id);
      if (btnHelp == null) {
        break missingId;
      }

      id = R.id.btnOfflineBooks;
      Button btnOfflineBooks = ViewBindings.findChildViewById(rootView, id);
      if (btnOfflineBooks == null) {
        break missingId;
      }

      id = R.id.btnScan;
      Button btnScan = ViewBindings.findChildViewById(rootView, id);
      if (btnScan == null) {
        break missingId;
      }

      id = R.id.ivMagnifyingGlass;
      ImageView ivMagnifyingGlass = ViewBindings.findChildViewById(rootView, id);
      if (ivMagnifyingGlass == null) {
        break missingId;
      }

      return new ActivityChildScanBinding((ConstraintLayout) rootView, btnBack, btnHelp,
          btnOfflineBooks, btnScan, ivMagnifyingGlass);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
